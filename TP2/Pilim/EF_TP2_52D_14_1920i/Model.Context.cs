//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EF_TP2_52D_14_1920i
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TL52D_14Entities : DbContext
    {
        public TL52D_14Entities()
            : base("name=TL52D_14Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<DailyMarket> DailyMarket { get; set; }
        public virtual DbSet<DailyReg> DailyReg { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<Exttriple> Exttriple { get; set; }
        public virtual DbSet<Instrument> Instrument { get; set; }
        public virtual DbSet<Market> Market { get; set; }
        public virtual DbSet<Phone> Phone { get; set; }
        public virtual DbSet<Portfolio> Portfolio { get; set; }
        public virtual DbSet<Position> Position { get; set; }
        public virtual DbSet<Portfolio_Summary> Portfolio_Summary { get; set; }
    
        [DbFunction("TL52D_14Entities", "FundamentalDataTable")]
        public virtual IQueryable<FundamentalDataTable_Result> FundamentalDataTable(string isin, Nullable<System.DateTime> date)
        {
            var isinParameter = isin != null ?
                new ObjectParameter("isin", isin) :
                new ObjectParameter("isin", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FundamentalDataTable_Result>("[TL52D_14Entities].[FundamentalDataTable](@isin, @date)", isinParameter, dateParameter);
        }
    
        [DbFunction("TL52D_14Entities", "Portfolio_List")]
        public virtual IQueryable<Portfolio_List_Result> Portfolio_List(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Portfolio_List_Result>("[TL52D_14Entities].[Portfolio_List](@name)", nameParameter);
        }
    
        public virtual int createPortfolio(Nullable<decimal> nif)
        {
            var nifParameter = nif.HasValue ?
                new ObjectParameter("nif", nif) :
                new ObjectParameter("nif", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createPortfolio", nifParameter);
        }
    
        public virtual int DailyMarketUpdate(Nullable<int> code, Nullable<System.DateTime> date)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailyMarketUpdate", codeParameter, dateParameter);
        }
    
        public virtual int p_actualizaValorDiario(string id, Nullable<System.DateTime> date)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_actualizaValorDiario", idParameter, dateParameter);
        }
    
        public virtual int remove_client(Nullable<decimal> nif)
        {
            var nifParameter = nif.HasValue ?
                new ObjectParameter("nif", nif) :
                new ObjectParameter("nif", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("remove_client", nifParameter);
        }
    
        public virtual int remove_market(Nullable<int> code)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("remove_market", codeParameter);
        }
    
        public virtual int update_client(Nullable<decimal> ncc, Nullable<decimal> nif, string name)
        {
            var nccParameter = ncc.HasValue ?
                new ObjectParameter("ncc", ncc) :
                new ObjectParameter("ncc", typeof(decimal));
    
            var nifParameter = nif.HasValue ?
                new ObjectParameter("nif", nif) :
                new ObjectParameter("nif", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_client", nccParameter, nifParameter, nameParameter);
        }
    
        public virtual int update_market(string description, string name, Nullable<int> code)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_market", descriptionParameter, nameParameter, codeParameter);
        }
    
        public virtual int UpdateTotalVal(string name, Nullable<int> quantity, string isin)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var isinParameter = isin != null ?
                new ObjectParameter("isin", isin) :
                new ObjectParameter("isin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTotalVal", nameParameter, quantityParameter, isinParameter);
        }
    }
}
